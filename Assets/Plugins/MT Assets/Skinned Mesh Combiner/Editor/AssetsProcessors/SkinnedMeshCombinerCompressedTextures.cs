using UnityEngine;
using UnityEditor;
using System.Collections.Generic;
using System.IO;
using UnityEditor.Build;

public class SkinnedMeshCombinerCompressedTextures : AssetPostprocessor, IActiveBuildTargetChanged
{
    //This class manages the Compressed Textures generated by merge done in the Editor, creating
    //Compressed Textures for the merges, according to the Platform currently active in the Editor.
    //This code is executed automatically by the editor whenever an asset is imported.

    static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths, bool didDomainReload)
    {
        //Prepare the list of imported assets of compressed textures
        List<string> compressedTextureImportedAssets = new List<string>();

        //Check all new imported assets...
        foreach (string assetPath in importedAssets)
            if (assetPath.ToLower().Contains("/mt assets/_assetsdata/atlases") == true)
                compressedTextureImportedAssets.Add(assetPath);

        //Process each compressed texture generated by SMC merge done in Editor
        foreach (string assetPath in compressedTextureImportedAssets)
            if (assetPath.Contains("SMC-NMin") == true || assetPath.Contains("SMC-HMin") == true)
            {
                //Skip this asset if is a RAW texture, uncompressed
                if (assetPath.Contains("RAW.asset") == true)
                    continue;

                //Create a copy of this texture, but in raw state, if not have
                if (File.Exists(("Assets/Plugins/MT Assets/_AssetsData/Atlases/" + Path.GetFileNameWithoutExtension(assetPath) + " RAW.asset")) == false)
                    AssetDatabase.CopyAsset(assetPath, ("Assets/Plugins/MT Assets/_AssetsData/Atlases/" + Path.GetFileNameWithoutExtension(assetPath) + " RAW.asset"));

                //Load the raw version of this texture
                Texture2D rawTexture = (Texture2D)AssetDatabase.LoadAssetAtPath(assetPath.Replace(".asset", " RAW.asset"), typeof(Texture2D));

                //Copy the raw version of this texture and compress it to desired compression level (RGBA32 to DXT5/ETC2 and RGB24 to DXT1/ETC1)
                Texture2D tempTexture = new Texture2D(rawTexture.width, rawTexture.height, TextureFormat.RGBA32, rawTexture.mipmapCount, (!rawTexture.isDataSRGB));
                tempTexture.SetPixels(0, 0, rawTexture.width, rawTexture.height, rawTexture.GetPixels(), 0);
                tempTexture.Apply();
                if (assetPath.Contains("SMC-NMin") == true)
                    tempTexture.Compress(false);
                if (assetPath.Contains("SMC-HMin") == true)
                    tempTexture.Compress(true);

                //Overwrite the texture used by merge, to be the new compressed texture
                if (!AssetDatabase.IsValidFolder("Assets/Plugins/MT Assets/_AssetsData/Atlases/Temp"))
                    AssetDatabase.CreateFolder("Assets/Plugins/MT Assets/_AssetsData/Atlases", "Temp");
                AssetDatabase.CreateAsset(tempTexture, ("Assets/Plugins/MT Assets/_AssetsData/Atlases/Temp/" + Path.GetFileNameWithoutExtension(assetPath) + ".asset"));
                File.Delete(assetPath);
                File.Move(("Assets/Plugins/MT Assets/_AssetsData/Atlases/Temp/" + Path.GetFileNameWithoutExtension(assetPath) + ".asset"), assetPath);
                File.Delete(("Assets/Plugins/MT Assets/_AssetsData/Atlases/Temp/" + Path.GetFileNameWithoutExtension(assetPath) + ".asset.meta"));
            }

        //Update the asset database
        AssetDatabase.Refresh();
    }

    public void OnActiveBuildTargetChanged(BuildTarget previousTarget, BuildTarget newTarget)
    {
        //Force reimport the Atlases folder of MT Assets
        AssetDatabase.ImportAsset("Assets/Plugins/MT Assets/_AssetsData/Atlases", ImportAssetOptions.ImportRecursive | ImportAssetOptions.DontDownloadFromCacheServer);
        AssetDatabase.Refresh();
    }
    public int callbackOrder { get { return 0; } }
}